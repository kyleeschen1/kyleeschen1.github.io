["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$blog.traverse","~:imports",null,"~:requires",["^ ","~$s","~$com.rpl.specter","^9","^9"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$traverse*",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/kyleeschen/Desktop/Blog/src/blog/traverse.cljs","~:line",62,"~:column",7,"~:end-line",62,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^F",[["~$state","~$branch?","~$children","~$make-node","~$pre-f","~$post-f","~$k"]]]]]],"^5","~$blog.traverse/traverse*","^@","src/blog/traverse.cljs","^D",16,"~:method-params",["^F",[["^H","^I","^J","^K","^L","^M","~$k"]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^B",1,"~:variadic?",false,"^A",62,"~:ret-tag","~$any","^C",62,"~:max-fixed-arity",7,"~:fn-var",true,"^E",["^F",["^G",["^F",[["^H","^I","^J","^K","^L","^M","~$k"]]]]]],"~$traverse-branch",["^ ","^>",null,"^?",["^ ","^@","/Users/kyleeschen/Desktop/Blog/src/blog/traverse.cljs","^A",88,"^B",7,"^C",88,"^D",22,"^E",["^F",["^G",["^F",[[["^ ","~:keys",["~$node"],"~:as","^H"],"^I","^J","^K","^L","^M","~$k"]]]]]],"^5","~$blog.traverse/traverse-branch","^@","src/blog/traverse.cljs","^D",22,"^O",["^F",[["~$p__26666","^I","^J","^K","^L","^M","~$k"]]],"^P",null,"^Q",["^F",[null,null]],"^B",1,"^R",false,"^A",88,"^C",88,"^U",7,"^V",true,"^E",["^F",["^G",["^F",[[["^ ","^X",["^Y"],"^Z","^H"],"^I","^J","^K","^L","^M","~$k"]]]]]],"~$compile-traversal",["^ ","^>",null,"^?",["^ ","^@","/Users/kyleeschen/Desktop/Blog/src/blog/traverse.cljs","^A",136,"^B",7,"^C",136,"^D",24,"^E",["^F",["^G",["^F",[["~$f"]]]]],"~:doc","Takes a tree of traversal or vectors of traversal\n   functions and composes them into one function that:\n  \n   1. Takes in a state.\n  \n   2. Runs each function of the the tree in\n      a depth-first order.\n  \n   3. Performs state updates between each\n      function call."],"^5","~$blog.traverse/compile-traversal","^@","src/blog/traverse.cljs","^D",24,"^O",["^F",[["~$f"]]],"^P",null,"^Q",["^F",[null,null]],"^B",1,"^R",false,"^A",136,"^S",["^4",[null,"^T","~$function"]],"^C",136,"^U",1,"^V",true,"^E",["^F",["^G",["^F",[["~$f"]]]]],"^12","Takes a tree of traversal or vectors of traversal\n   functions and composes them into one function that:\n  \n   1. Takes in a state.\n  \n   2. Runs each function of the the tree in\n      a depth-first order.\n  \n   3. Performs state updates between each\n      function call."],"~$process",["^ ","^>",null,"^?",["^ ","^@","/Users/kyleeschen/Desktop/Blog/src/blog/traverse.cljs","^A",127,"^B",7,"^C",127,"^D",14,"^E",["^F",["^G",["^F",[["~$prev-state","~$new-state"]]]]]],"^5","~$blog.traverse/process","^@","src/blog/traverse.cljs","^D",14,"^O",["^F",[["^16","^17"]]],"^P",null,"^Q",["^F",[null,null]],"^B",1,"^R",false,"^A",127,"^S",["^4",[null,"^T","~$clj-nil"]],"^C",127,"^U",2,"^V",true,"^E",["^F",["^G",["^F",[["^16","^17"]]]]]],"~$traverse",["^ ","^>",null,"^?",["^ ","^@","/Users/kyleeschen/Desktop/Blog/src/blog/traverse.cljs","^A",20,"^B",7,"^C",20,"^D",15,"^E",["^F",["^G",["^F",[["^H","^I","^J","^K","^L","^M"]]]]],"^12","Walks a nested structure, applying inner and\n   outer functions.\n\n   Like a zipper, one must provide a branch?, children,\n   and make-node function.\n\n   Unlike a zipper, this allows:\n\n   1. The application of an inner and outer function,\n      which are difficult with the zipper 'next' function\n      because of ambiguity over whether branch nodes have\n      already been visted.\n\n   2. A transfer of state between nodes, which facilitates\n      accumulation, globally and locally scoped data, counters,\n      interpreters, etc.\n\n   To Add:\n\n   - A filter function that prevents navigation into the node.\n   - Ability to stop the entire computation and retrieve continuation.\n   - The ability to re-run a node after a function has been applied."],"^5","~$blog.traverse/traverse","^@","src/blog/traverse.cljs","^D",15,"^O",["^F",[["^H","^I","^J","^K","^L","^M"]]],"^P",null,"^Q",["^F",[null,null]],"^B",1,"^R",false,"^A",20,"^S","^T","^C",20,"^U",6,"^V",true,"^E",["^F",["^G",["^F",[["^H","^I","^J","^K","^L","^M"]]]]],"^12","Walks a nested structure, applying inner and\n   outer functions.\n\n   Like a zipper, one must provide a branch?, children,\n   and make-node function.\n\n   Unlike a zipper, this allows:\n\n   1. The application of an inner and outer function,\n      which are difficult with the zipper 'next' function\n      because of ambiguity over whether branch nodes have\n      already been visted.\n\n   2. A transfer of state between nodes, which facilitates\n      accumulation, globally and locally scoped data, counters,\n      interpreters, etc.\n\n   To Add:\n\n   - A filter function that prevents navigation into the node.\n   - Ability to stop the entire computation and retrieve continuation.\n   - The ability to re-run a node after a function has been applied."],"~$pathcache26668",["^ ","~:no-doc",true,"^?",["^ ","~:cljs.analyzer/no-resolve",true,"^1=",true,"~:private",true,"^@",null],"^1?",true,"^5","~$blog.traverse/pathcache26668","^@","src/blog/traverse.cljs","^B",25,"^A",112,"^1>",true,"~:tag","~$com.rpl.specter.impl/CachedPathInfo"],"~$pathcache26671",["^ ","^1=",true,"^?",["^ ","^1>",true,"^1=",true,"^1?",true,"^@",null],"^1?",true,"^5","~$blog.traverse/pathcache26671","^@","src/blog/traverse.cljs","^B",25,"^A",112,"^1>",true,"^1A","^1B"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$s","^9","^9","^9"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:skip?","~:node"]],"~:order",["^1J","^1I"]],"^12",null]