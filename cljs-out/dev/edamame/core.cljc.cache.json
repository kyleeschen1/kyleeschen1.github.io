["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$edamame.core","~:imports",null,"~:requires",["^ ","~$rt","~$cljs.tools.reader.reader-types","^:","^:","~$clojure.tools.reader.reader-types","^:","~$p","~$edamame.impl.parser","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$parse-string",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/kyleeschen/Desktop/Blog/resources/public/cljs-out/dev/edamame/core.cljc","~:line",6,"~:column",7,"~:end-line",6,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^I",[["~$s"],["~$s","~$opts"]]]]],"~:doc","Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  `:postprocess`: a function that is called with a map containing\n  `:obj`, the read value, and `:loc`, the location metadata. This can\n  be used to handle objects that cannot carry metadata differently. If\n  this option is provided, attaching location metadata is not\n  automatically added to the object.\n\n  `:location?`: a predicate that is called with the parsed\n  object. Should return a truthy value to determine if location\n  information will be added.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n  ","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["~$s"],["~$s","^K"]],"^H",["^I",[["~$s"],["~$s","^K"]]],"~:arglists-meta",["^I",[null,null]]]],"^5","~$edamame.core/parse-string","^C","resources/public/cljs-out/dev/edamame/core.cljc","^G",19,"^M",["^ ","^N",false,"^O",2,"^P",2,"^Q",[["~$s"],["~$s","^K"]],"^H",["^I",[["~$s"],["~$s","^K"]]],"^R",["^I",[null,null]]],"^Q",[["~$s"],["~$s","^K"]],"~:protocol-impl",null,"^O",2,"^R",["^I",[null,null]],"^E",1,"^N",false,"~:methods",[["^ ","^O",1,"^N",false,"~:tag",["^4",["~$any","~$clj-nil"]]],["^ ","^O",2,"^N",false,"^V",["^4",["^W","^X"]]]],"^D",6,"^F",6,"^P",2,"~:fn-var",true,"^H",["^I",[["~$s"],["~$s","^K"]]],"^L","Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  `:postprocess`: a function that is called with a map containing\n  `:obj`, the read value, and `:loc`, the location metadata. This can\n  be used to handle objects that cannot carry metadata differently. If\n  this option is provided, attaching location metadata is not\n  automatically added to the object.\n\n  `:location?`: a predicate that is called with the parsed\n  object. Should return a truthy value to determine if location\n  information will be added.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n  "],"~$iobj?",["^ ","^A",null,"^B",["^ ","^C","/Users/kyleeschen/Desktop/Blog/resources/public/cljs-out/dev/edamame/core.cljc","^D",109,"^E",7,"^F",109,"^G",12,"^H",["^I",["^J",["^I",[["~$obj"]]]]],"^L","Returns true if obj can carry metadata."],"^5","~$edamame.core/iobj?","^C","resources/public/cljs-out/dev/edamame/core.cljc","^G",12,"^Q",["^I",[["^["]]],"^T",null,"^R",["^I",[null,null]],"^E",1,"^N",false,"^D",109,"~:ret-tag","~$boolean","^F",109,"^P",1,"^Y",true,"^H",["^I",["^J",["^I",[["^["]]]]],"^L","Returns true if obj can carry metadata."],"~$normalize-opts",["^ ","^A",null,"^B",["^ ","^C","/Users/kyleeschen/Desktop/Blog/resources/public/cljs-out/dev/edamame/core.cljc","^D",91,"^E",7,"^F",91,"^G",21,"^H",["^I",["^J",["^I",[["^K"]]]]]],"^5","~$edamame.core/normalize-opts","^C","resources/public/cljs-out/dev/edamame/core.cljc","^G",21,"^Q",["^I",[["^K"]]],"^T",null,"^R",["^I",[null,null]],"^E",1,"^N",false,"^D",91,"^11","~$edamame.impl.parser/Options","^F",91,"^P",1,"^Y",true,"^H",["^I",["^J",["^I",[["^K"]]]]]],"~$source-reader",["^ ","^A",null,"^B",["^ ","^C","/Users/kyleeschen/Desktop/Blog/resources/public/cljs-out/dev/edamame/core.cljc","^D",79,"^E",7,"^F",79,"^G",20,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^L","Coerces x into source-logging-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"^5","~$edamame.core/source-reader","^C","resources/public/cljs-out/dev/edamame/core.cljc","^G",20,"^Q",["^I",[["~$x"]]],"^T",null,"^R",["^I",[null,null]],"^E",1,"^N",false,"^D",79,"^11","^W","^F",79,"^P",1,"^Y",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^L","Coerces x into source-logging-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"~$get-column-number",["^ ","^A",null,"^B",["^ ","^C","/Users/kyleeschen/Desktop/Blog/resources/public/cljs-out/dev/edamame/core.cljc","^D",88,"^E",7,"^F",88,"^G",24,"^H",["^I",["^J",["^I",[["~$reader"]]]]]],"^5","~$edamame.core/get-column-number","^C","resources/public/cljs-out/dev/edamame/core.cljc","^G",24,"^Q",["^I",[["^19"]]],"^T",null,"^R",["^I",[null,null]],"^E",1,"^N",false,"^D",88,"^11","^W","^F",88,"^P",1,"^Y",true,"^H",["^I",["^J",["^I",[["^19"]]]]]],"~$parse-next",["^ ","^A",null,"^B",["^ ","^C","/Users/kyleeschen/Desktop/Blog/resources/public/cljs-out/dev/edamame/core.cljc","^D",94,"^E",7,"^F",94,"^G",17,"^H",["^I",["^J",["^I",[["^19"],["^19","^K"]]]]],"^L","Parses next form from reader. Accepts same opts as parse-string, must\n  be normalized with normalize-opts first.","^M",["^ ","^N",false,"^O",2,"^P",2,"^Q",[["^19"],["^19","^K"]],"^H",["^I",[["^19"],["^19","^K"]]],"^R",["^I",[null,null]]]],"^5","~$edamame.core/parse-next","^C","resources/public/cljs-out/dev/edamame/core.cljc","^G",17,"^M",["^ ","^N",false,"^O",2,"^P",2,"^Q",[["^19"],["^19","^K"]],"^H",["^I",[["^19"],["^19","^K"]]],"^R",["^I",[null,null]]],"^Q",[["^19"],["^19","^K"]],"^T",null,"^O",2,"^R",["^I",[null,null]],"^E",1,"^N",false,"^U",[["^ ","^O",1,"^N",false,"^V","^W"],["^ ","^O",2,"^N",false,"^V",["^4",["^W","~$cljs.core/Keyword"]]]],"^D",94,"^F",94,"^P",2,"^Y",true,"^H",["^I",[["^19"],["^19","^K"]]],"^L","Parses next form from reader. Accepts same opts as parse-string, must\n  be normalized with normalize-opts first."],"~$parse-string-all",["^ ","^A",null,"^B",["^ ","^C","/Users/kyleeschen/Desktop/Blog/resources/public/cljs-out/dev/edamame/core.cljc","^D",65,"^E",7,"^F",65,"^G",23,"^H",["^I",["^J",["^I",[["~$s"],["~$s","^K"]]]]],"^L","Like parse-string but parses all values from string and returns them\n  in a vector.","^M",["^ ","^N",false,"^O",2,"^P",2,"^Q",[["~$s"],["~$s","^K"]],"^H",["^I",[["~$s"],["~$s","^K"]]],"^R",["^I",[null,null]]]],"^5","~$edamame.core/parse-string-all","^C","resources/public/cljs-out/dev/edamame/core.cljc","^G",23,"^M",["^ ","^N",false,"^O",2,"^P",2,"^Q",[["~$s"],["~$s","^K"]],"^H",["^I",[["~$s"],["~$s","^K"]]],"^R",["^I",[null,null]]],"^Q",[["~$s"],["~$s","^K"]],"^T",null,"^O",2,"^R",["^I",[null,null]],"^E",1,"^N",false,"^U",[["^ ","^O",1,"^N",false,"^V","~$clj"],["^ ","^O",2,"^N",false,"^V","^1@"]],"^D",65,"^F",65,"^P",2,"^Y",true,"^H",["^I",[["~$s"],["~$s","^K"]]],"^L","Like parse-string but parses all values from string and returns them\n  in a vector."],"^19",["^ ","^A",null,"^B",["^ ","^C","/Users/kyleeschen/Desktop/Blog/resources/public/cljs-out/dev/edamame/core.cljc","^D",73,"^E",7,"^F",73,"^G",13,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^L","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"^5","~$edamame.core/reader","^C","resources/public/cljs-out/dev/edamame/core.cljc","^G",13,"^Q",["^I",[["~$x"]]],"^T",null,"^R",["^I",[null,null]],"^E",1,"^N",false,"^D",73,"^11","^W","^F",73,"^P",1,"^Y",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^L","Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader."],"~$get-line-number",["^ ","^A",null,"^B",["^ ","^C","/Users/kyleeschen/Desktop/Blog/resources/public/cljs-out/dev/edamame/core.cljc","^D",85,"^E",7,"^F",85,"^G",22,"^H",["^I",["^J",["^I",[["^19"]]]]]],"^5","~$edamame.core/get-line-number","^C","resources/public/cljs-out/dev/edamame/core.cljc","^G",22,"^Q",["^I",[["^19"]]],"^T",null,"^R",["^I",[null,null]],"^E",1,"^N",false,"^D",85,"^11","^W","^F",85,"^P",1,"^Y",true,"^H",["^I",["^J",["^I",[["^19"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$p","^<","^<","^<"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:eof","~:edamame.core/eof"]],"~:order",["^1H","^1I"]],"^L",null]